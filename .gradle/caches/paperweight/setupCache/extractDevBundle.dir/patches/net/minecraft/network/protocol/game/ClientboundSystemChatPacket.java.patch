--- a/net/minecraft/network/protocol/game/ClientboundSystemChatPacket.java
+++ b/net/minecraft/network/protocol/game/ClientboundSystemChatPacket.java
@@ -1,3 +1,4 @@
+// mc-dev import
 package net.minecraft.network.protocol.game;
 
 import java.util.Objects;
@@ -7,18 +8,53 @@
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.protocol.Packet;
 
-public record ClientboundSystemChatPacket(Component content, int typeId) implements Packet<ClientGamePacketListener> {
+// Spigot start
+public record ClientboundSystemChatPacket(@javax.annotation.Nullable net.kyori.adventure.text.Component adventure$content, @javax.annotation.Nullable String content, int typeId) implements Packet<ClientGamePacketListener> { // Paper - Adventure
+
+    public ClientboundSystemChatPacket(Component content, int typeId) {
+        this(null, Component.Serializer.toJson(content), typeId); // Paper - Adventure
+    }
+
+    public ClientboundSystemChatPacket(net.md_5.bungee.api.chat.BaseComponent[] content, int typeId) {
+        this(null, improveBungeeComponentSerialization(content), typeId); // Paper - Adventure & don't nest if we don't need to so that we can preserve formatting
+    }
+    // Spigot end
+    // Paper start
+    public ClientboundSystemChatPacket {
+        com.google.common.base.Preconditions.checkArgument(!(adventure$content == null && content == null), "Component adventure$content and String (json) content cannot both be null");
+    }
+
+    public ClientboundSystemChatPacket(net.kyori.adventure.text.Component content, int typeId) {
+        this(content, null, typeId);
+    }
+
+    private static String improveBungeeComponentSerialization(net.md_5.bungee.api.chat.BaseComponent[] content) {
+        if (content.length == 1) {
+            return net.md_5.bungee.chat.ComponentSerializer.toString(content[0]);
+        } else {
+            return net.md_5.bungee.chat.ComponentSerializer.toString(content);
+        }
+    }
+    // Paper end
+
     public ClientboundSystemChatPacket(FriendlyByteBuf buf) {
         this(buf.readComponent(), buf.readVarInt());
     }
 
     @Override
     public void write(FriendlyByteBuf buf) {
-        buf.writeComponent(this.content);
+        // Paper start
+        if (this.adventure$content != null) {
+            buf.writeComponent(this.adventure$content);
+        } else if (this.content != null) {
+        buf.writeUtf(this.content, 262144); // Spigot
+        } else {
+            throw new IllegalArgumentException("Must supply either adventure component or string json content");
+        }
+        // Paper end
         buf.writeVarInt(this.typeId);
     }
 
-    @Override
     public void handle(ClientGamePacketListener listener) {
         listener.handleSystemChat(this);
     }
@@ -29,6 +65,6 @@
     }
 
     public ChatType resolveType(Registry<ChatType> registry) {
-        return Objects.requireNonNull(registry.byId(this.typeId), "Invalid chat type");
+        return (ChatType) Objects.requireNonNull((ChatType) registry.byId(this.typeId), "Invalid chat type");
     }
 }
